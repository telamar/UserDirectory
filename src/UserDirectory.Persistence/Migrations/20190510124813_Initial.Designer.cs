// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;

namespace UserDirectory.Persistence.Migrations
{
    [DbContext(typeof(UserDirectoryDbContext))]
    [Migration("20190510124813_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("UserDirectory.Domain.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("UserDirectory.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("UserDirectory.Domain.Entities.UserDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserIdentityId");

                    b.HasKey("Id");

                    b.HasIndex("UserIdentityId")
                        .IsUnique();

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("UserDirectory.Domain.Entities.UserIdentity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("UserIdentities");
                });

            modelBuilder.Entity("UserDirectory.Domain.Entities.UserIdentityGroup", b =>
                {
                    b.Property<int>("UserIdentityId");

                    b.Property<int>("GroupId");

                    b.HasKey("UserIdentityId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserIdentityGroups");
                });

            modelBuilder.Entity("UserDirectory.Domain.Entities.UserIdentityRole", b =>
                {
                    b.Property<int>("UserIdentityId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserIdentityId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserIdentityRoles");
                });

            modelBuilder.Entity("UserDirectory.Domain.Entities.Role", b =>
                {
                    b.HasOne("UserDirectory.Domain.Entities.Group", "Group")
                        .WithMany("Roles")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserDirectory.Domain.Entities.UserDetails", b =>
                {
                    b.HasOne("UserDirectory.Domain.Entities.UserIdentity", "UserIdentity")
                        .WithOne("UserDetails")
                        .HasForeignKey("UserDirectory.Domain.Entities.UserDetails", "UserIdentityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserDirectory.Domain.Entities.UserIdentityGroup", b =>
                {
                    b.HasOne("UserDirectory.Domain.Entities.Group", "Group")
                        .WithMany("UserIdentityGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UserDirectory.Domain.Entities.UserIdentity", "UserIdentity")
                        .WithMany("UserIdentityGroups")
                        .HasForeignKey("UserIdentityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserDirectory.Domain.Entities.UserIdentityRole", b =>
                {
                    b.HasOne("UserDirectory.Domain.Entities.Role", "Role")
                        .WithMany("UserIdentityRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UserDirectory.Domain.Entities.UserIdentity", "UserIdentity")
                        .WithMany("UserIdentityRoles")
                        .HasForeignKey("UserIdentityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
